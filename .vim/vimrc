"====================================== 外观设定 ====================================== 
syntax enable
syntax on                       " 开启代码高亮
set background=dark             " set bg=dark 
set cmdheight=2                 " 设定cmd的高度
set number                      " 开启行号
" set relativenumber              " 开启相对行号
colorscheme desert           " 设定主题
set tabstop=4                   " 设置 tab的宽度
set expandtab                   " 空格代替tab
set autoindent                  " 自动缩进
set smartindent                 " 智能缩进,能识别{ }
set cindent                     " 开启C语言缩进模式
set shiftwidth=4                " 设置格式化时制表符所占用的空格
set softtabstop=4               " 让vim把连续数量的制表看成空格
set copyindent                  " 复制的时候缩进

set cursorline                  " 高亮当前行
" set cursorcolumn                " 高亮当前列
set ruler                       " 显示光标当前的位置,逗号分隔
set list                        " 显示特殊字符
set listchars=tab:\~\ ,trail:.  " 设定tab用~表示,行尾空白用.

set laststatus=2                " 启动显示状态行(1),总是显示状态行(2) 
set encoding=utf-8
set mouse=a

"====================================== 行为设定 ====================================== 
filetype on                     "开启文件类型侦测
set history=1000                "记录的最大cmd历史
set nocompatible                "关闭vi兼容
set backspace=indent,eol,start  "使用 退格键 来删除
set whichwrap=<,>,[,],h,l       " 光标在行尾,行首移动 

set autowrite                   " 文件一有写入,自动保存
set autoread                    " 文件改变时,自动载入
set nobackup                    " 不使用备份文件
set noswapfile                  " 不使用交换文件
set showcmd                     " 显示输入的命令
set showmatch                   " 在输入括号时光标会短暂地跳到与之相匹配的括号处，不影响输入

set nohls                       " 不高亮搜索
set incsearch                   " 实时搜索
set novisualbell                " 不使用 visualbell

set fileencodings=utf-8         " 设定文件的编码
set fileformat=unix             " 设定文件的格式

"快捷键
"imap <c-l> <esc>A
"imap <c-h> <esc>I
""括号自动补全
""inoremap ( ()<esc>i
""inoremap { {}<esc>i
""inoremap [ []<esc>i
""inoremap " ""<esc>i
""inoremap ' ''<esc>i



call plug#begin('~/.vim/plugged')

" Git
Plug 'rhysd/conflict-marker.vim'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'gisphm/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }
Plug 'Xuyuanp/nerdtree-git-plugin'

" YouCompleteMe
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" tags
Plug 'ludovicchabant/vim-gutentags'

" go
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'dense-analysis/ale'

Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
call plug#end()



" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
   endifconfig YCM

" config ale
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
nnoremap <Leader>en <Plug>(ale_next)
nnoremap <Leader>ep <Plug>(ale_previous)

" config cpp-enhance-highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_concepts_highlight = 1

" config git-status
let g:NERDTreeGitStatusPorcelainVersion = 1
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

endif
